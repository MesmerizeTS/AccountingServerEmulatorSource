using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TSTest
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("D: " + Decrypt("dklmdjjdbfihgmpngdnhecmflddj"));
            //Console.WriteLine("E: " + Encrypt("80.190.145.215"));
            Console.WriteLine("1: " + Decrypt("gdophemnfjnjdgkfdjifecidohgnpkfbnmfckachpjacidbk"));
            Console.WriteLine("2: " + Decrypt("gaonhemjfjmhcdkpdeinbjjjpggfpjeficedkecnlkbcjmbcgaohdjmcednk"));
            Console.WriteLine("3: " + Decrypt("glpmhemkejnecjoccdihanjkpbhmpcedmhbjkccdlk"));
            Console.ReadKey();
        }

        static Byte[] encryptKey = {0x02,0x8C,0x17,0xA2,0x2C,0xB7,0x42,0xCC, 0x57,0xE2,0x6C,0xF7,0x82,0x0C,0x97,0x22,
                                    0xAC,0x37,0xC1,0x4C,0xD7,0x61,0xEC,0x77, 0x01,0x8C,0x17,0xA1,0x2C,0xB7,0x41,0xCC,
                                    0x57,0xE1,0x6C,0xF6,0x81,0x0C,0x96,0x21, 0xAC,0x36,0xC1,0x4C,0xD6,0x61,0xEC,0x76,
                                    0x01,0x8C,0x16,0xA1,0x2C,0xB6,0x41,0xCB, 0x56,0xE1,0x6B,0xF6,0x81,0x0B,0x96,0x21,
                                    0xAB,0x36,0xC1,0x4B,0xD6,0x61,0xEB,0x76, 0x00,0x8B,0x16,0xA0,0x2B,0xB6,0x40,0xCB,
                                    0x56,0xE0,0x6B,0xF6,0x80,0x0B,0x96,0x20, 0xAB,0x35,0xC0,0x4B,0xD5,0x60,0xEB,0x75,
                                    0x00,0x8B,0x15,0xA0,0x2B,0xB5,0x40,0xCB, 0x55,0xE0,0x6A,0xF5,0x80,0x0A,0x95,0x20,
                                    0xAA,0x35,0xC0,0x4A,0xD5,0x60,0xEA,0x75, 0x00,0x8A,0x15,0xA0,0x2A,0xB5,0x3F,0xCA,
                                    0x55,0xDF,0x6A,0xF5,0x7F,0x0A,0x95,0x1F, 0xAA,0x35,0xBF,0x4A,0xD5,0x5F,0xEA,0x74,
                                    0xFF,0x8A,0x14,0x9F,0x2A,0xB4,0x3F,0xCA, 0x54,0xDF,0x6A,0xF4,0x7F,0x0A,0x94,0x1F,
                                    0xA9,0x34,0xBF,0x49,0xD4,0x5F,0xE9,0x74, 0xFF,0x89,0x14,0x9F,0x29,0xB4,0x3F,0xC9,
                                    0x54,0xDE,0x69,0xF4,0x7E,0x09,0x94,0x1E, 0xA9,0x34,0xBE,0x49,0xD4,0x5E,0xE9,0x74,
                                    0xFE,0x89,0x13,0x9E,0x29,0xB3,0x3E,0xC9, 0x53,0xDE,0x69,0xF3,0x7E,0x09,0x93,0x1E,
                                    0xA9,0x33,0xBE,0x49,0xD3,0x5E,0xE8,0x73, 0xFE,0x88,0x13,0x9E,0x28,0xB3,0x3E,0xC8,
                                    0x53,0xDE,0x68,0xF3,0x7E,0x08,0x93,0x1D, 0xA8,0x33,0xBD,0x48,0xD3,0x5D,0xE8,0x73,
                                    0xFD,0x88,0x13,0x9D,0x28,0xB3,0x3D,0x4B, 0xD6,0x61,0xEB,0x76,0x01,0x8B,0x16,0xA1,
                                    0x2B/*,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00*/};
        static string Decrypt(string source)
        {
            char[] output = new char[source.Length >> 1];
            char[] sourceArr = source.ToCharArray();

            // Loop 1
            for (uint pos1 = 0; pos1 < source.Length; pos1 = pos1 + 2)
            {
                int x, y;
                x = sourceArr[pos1];
                y = sourceArr[pos1 + 1];
                output[pos1 >> 1] = (char)((((x - 97) * 16 - 97) + y) ^ encryptKey[(pos1 >> 1) % encryptKey.Length]);

                //int temp = sourceArr[pos1] - 97;
                //temp = temp * 16;
                //temp = temp - 97;
                //temp = temp + sourceArr[pos1 + 1];
                //temp = temp ^ (int)encryptKey[(pos1 >> 1) % encryptKey.Length];
                //output[pos1 >> 1] = (char)temp;
            }

            return new string(output);
        }

        static string Encrypt(string source)
        {
            char[] output = new char[source.Length << 1];
            char[] sourceArr = source.ToCharArray();

            // Loop 1
            for (uint pos1 = 0; pos1 < source.Length; pos1++)
            {
                int x, y, z;


            }
            
            return new string(output);
        }
    }
}
